{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","value","backgroundColor","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","filter","element","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.675b06c9.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n                            </li>\r\n                        </ul>\r\n                        <div className=\"form-check form-switch\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n                            <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                        </div>\r\n                    </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\n// Navbar.propTypes = {\r\n//     title: PropTypes.string.isRequired,\r\n//     aboutText: PropTypes.string\r\n// };\r\n// Navbar.defaultProps = {\r\n//     title: \"Title Here\",\r\n//     aboutText: \"About\"\r\n// };","import React from 'react'\r\nimport { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('success', 'Converted to UpperCase.');\r\n    }\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('success', 'Converted to LowerCase.');\r\n    }\r\n    const handleCopy = () => {\r\n        let text = document.getElementById(\"area\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert('success', 'Text copied to clipboard.');\r\n    }\r\n    const handleExtraSpaces = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert('success', 'Extra spaces removed.');\r\n    }\r\n    const handleClear = () =>{\r\n        setText(\"\");\r\n        props.showAlert('success', 'Text cleared.');\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color: props.mode==='light'?'black':'white'}}>\r\n                <h1 className=\"my-2\">Enter text for analysis</h1>\r\n                <div className=\"mb-3 my-2\">\r\n                    <textarea value={text} style={{backgroundColor:props.mode==='light'?'#f8f9fa':'#495057', color: props.mode==='light'?'black':'white'}} onChange={handleOnChange} className=\"form-control\" id=\"area\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className={`btn btn-${props.mode} mx-1 my-1`} onClick={handleUpClick}>To Upper Case</button>\r\n                <button className={`btn btn-${props.mode} mx-1 my-1`} onClick={handleLoClick}>To Lower Case</button>\r\n                <button className={`btn btn-${props.mode} mx-1 my-1`} onClick={handleCopy}>Copy text</button>\r\n                <button className={`btn btn-${props.mode} mx-1 my-1`} onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n                <button className={`btn btn-${props.mode} mx-1 my-1`} onClick={handleClear}>Clear Text</button>\r\n            </div>\r\n            <div className=\"container\" style={{color: props.mode==='light'?'black':'white'}}>\r\n                <h2>Number of words: </h2>\r\n                {text.split(' ').filter((element)=>{return element.length!==0}).length}\r\n                <h2>Number of characters: </h2>\r\n                {text.length}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        // this funtion will capitalize the first letter of the alert type without altering the original value of alert type\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        //as alert is null by default, we cannot read its type and msg value which throws an error so we use && operator which will work like if alert is null then further jsx will not get executed\r\n       props.alert && <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\r\n// import About from './Components/About';\r\nimport Navbar from './Components/Navbar.js';\r\nimport TextForm from './Components/TextForm';\r\nimport { useState } from 'react'\r\nimport Alert from './Components/Alert';\r\n// import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\r\n// router do not work with github pages\r\n\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light');\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = `#01203f`;\r\n      showAlert('success', 'Dark mode enabled');\r\n      document.title = 'TextUtils- Dark';\r\n    }\r\n    else {\r\n      setMode('light');\r\n      document.body.style.backgroundColor = `#d1d2d3`;\r\n      showAlert('success', 'Dark mode disabled');\r\n      document.title = 'TextUtils- Light';\r\n    }\r\n  }\r\n\r\n  const showAlert = (type, message) => {\r\n    setAlert({\r\n      type: type,\r\n      msg: message\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 2000);\r\n  }\r\n  return (\r\n    <>\r\n      {/* <Router> */}\r\n      <Navbar title=\"TextUtils\" toggleMode={toggleMode} mode={mode} />\r\n      <div style={{height: `7vh`}}>\r\n      <Alert alert={alert} />\r\n      </div>\r\n      {/* <Switch> */}\r\n      {/* <Route exact path='/'> */}\r\n      <div className=\"container\">\r\n        <TextForm mode={mode} showAlert={showAlert} />\r\n      </div>\r\n      {/* </Route> */}\r\n      {/* <Route exact path='/about'> */}\r\n      {/* <About /> */}\r\n      {/* </Route> */}\r\n      {/* </Switch> */}\r\n      {/* </Router> */}\r\n    </>\r\n  );\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}